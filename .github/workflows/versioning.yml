# name: Versioning and Build Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   versioning-and-build:
#     runs-on: ubuntu-latest

#     permissions:
#       contents: write  # Ensure GitHub Actions can push to the repo

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Git
#       run: |
#         git config --global user.email "vamsimohanyacham@gmail.com"
#         git config --global user.name "vamsimohanyacham"

#     - name: Retrieve version from version.txt
#       run: |
#         VERSION_FILE="version.txt"
#         if [ -f "$VERSION_FILE" ]; then
#           VERSION=$(cat $VERSION_FILE)
#           echo "Found version: $VERSION"
#         else
#           echo "No version.txt found, initializing version to 1.0.1"
#           VERSION="1.0.1"  # Start with version 1.0.1 if the file is missing
#           echo "$VERSION" > $VERSION_FILE  # Create the file and write initial version
#           git add $VERSION_FILE
#           git commit -m "Initialize version to 1.0.1"
#           git push https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/vamsimohanyacham/test.git HEAD:main
#         fi
#         echo "VERSION=$VERSION" >> $GITHUB_ENV  # Export version as an environment variable

#     - name: Increment version
#       run: |
#         IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        
#         MAJOR=${VERSION_PARTS[0]}
#         MINOR=${VERSION_PARTS[1]}
#         PATCH=${VERSION_PARTS[2]}

#         # Increment patch version, or move to minor/major version if necessary
#         if [ "$PATCH" -lt 9 ]; then
#           PATCH=$((PATCH + 1))
#         elif [ "$MINOR" -lt 9 ]; then
#           PATCH=0
#           MINOR=$((MINOR + 1))
#         elif [ "$MAJOR" -lt 9 ]; then
#           PATCH=0
#           MINOR=0
#           MAJOR=$((MAJOR + 1))
#         else
#           echo "Error: Version exceeds 9.9.9. Cannot increment further."
#           exit 1
#         fi

#         NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
#         echo "New version: $NEW_VERSION"
        
#         # Update version.txt with the new version
#         echo "$NEW_VERSION" > version.txt
#         git add version.txt

#         # Check if version.txt has been staged for commit
#         git diff --cached
        
#         # Commit the version.txt file with the new version
#         git commit -m "Update version to $NEW_VERSION"

#         # Ensure that the commit was successful
#         if git diff --cached --exit-code; then
#           echo "No changes to commit, skipping commit."
#         else
#           echo "Version updated to $NEW_VERSION"
#         fi

#         # Push the changes to the current branch (main)
#         git push https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/vamsimohanyacham/test.git HEAD:main
        
#         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Export new version for further steps

#     - name: Verify NEW_VERSION variable
#       run: |
#         echo "NEW_VERSION is $NEW_VERSION"  # To verify the value of NEW_VERSION after increment

#     - name: Create and push new branch for version
#       run: |
#         if [ -z "$NEW_VERSION" ]; then
#           echo "Error: NEW_VERSION is empty. Exiting."
#           exit 1
#         fi

#         BRANCH_NAME="version-$NEW_VERSION"
#         echo "Creating branch: $BRANCH_NAME"
        
#         git fetch origin  # Fetch latest changes from the remote

#         # Check if branch already exists on the remote
#         if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
#           echo "Branch $BRANCH_NAME already exists, incrementing version..."
          
#           # Automatically increment to the next patch version
#           PATCH=$((PATCH + 1))
#           NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
#           BRANCH_NAME="version-$NEW_VERSION"
#           echo "New branch name: $BRANCH_NAME"
#         fi

#         git checkout -b "$BRANCH_NAME"  # Create the new branch locally

#         # Push the new branch to GitHub
#         git push https://github-actions:${{ secrets.GITHUB_TOKE }}@github.com/vamsimohanyacham/test.git "$BRANCH_NAME"

#     - name: Install dependencies using npm
#       run: npm install

#     - name: Ensure Vite is executable
#       run: |
#         if [ -f node_modules/.bin/vite ]; then
#           chmod +x node_modules/.bin/vite
#         fi

#     - name: Build Vite app
#       run: npm run build

#     - name: Create .zip archive
#       run: |
#         zip -r build.zip dist/*

#     - name: Deploy to Nginx
#       run: |
#         echo "Deploying to Nginx"
